/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_rocksdb_EnvOptions */

#ifndef _Included_org_rocksdb_EnvOptions
#define _Included_org_rocksdb_EnvOptions
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    newEnvOptions
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_EnvOptions_newEnvOptions__
  (JNIEnv *, jclass);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    newEnvOptions
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_EnvOptions_newEnvOptions__J
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    disposeInternalJni
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_EnvOptions_disposeInternalJni
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    setUseMmapReads
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_EnvOptions_setUseMmapReads
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    useMmapReads
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_EnvOptions_useMmapReads
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    setUseMmapWrites
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_EnvOptions_setUseMmapWrites
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    useMmapWrites
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_EnvOptions_useMmapWrites
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    setUseDirectReads
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_EnvOptions_setUseDirectReads
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    useDirectReads
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_EnvOptions_useDirectReads
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    setUseDirectWrites
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_EnvOptions_setUseDirectWrites
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    useDirectWrites
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_EnvOptions_useDirectWrites
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    setAllowFallocate
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_EnvOptions_setAllowFallocate
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    allowFallocate
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_EnvOptions_allowFallocate
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    setSetFdCloexec
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_EnvOptions_setSetFdCloexec
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    setFdCloexec
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_EnvOptions_setFdCloexec
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    setBytesPerSync
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_EnvOptions_setBytesPerSync
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    bytesPerSync
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_EnvOptions_bytesPerSync
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    setFallocateWithKeepSize
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_EnvOptions_setFallocateWithKeepSize
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    fallocateWithKeepSize
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_EnvOptions_fallocateWithKeepSize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    setCompactionReadaheadSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_EnvOptions_setCompactionReadaheadSize
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    compactionReadaheadSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_EnvOptions_compactionReadaheadSize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    setRandomAccessMaxBufferSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_EnvOptions_setRandomAccessMaxBufferSize
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    randomAccessMaxBufferSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_EnvOptions_randomAccessMaxBufferSize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    setWritableFileMaxBufferSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_EnvOptions_setWritableFileMaxBufferSize
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    writableFileMaxBufferSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_EnvOptions_writableFileMaxBufferSize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_EnvOptions
 * Method:    setRateLimiter
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_EnvOptions_setRateLimiter
  (JNIEnv *, jclass, jlong, jlong);

#ifdef __cplusplus
}
#endif
#endif
