/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_rocksdb_ConcurrentTaskLimiterImpl */

#ifndef _Included_org_rocksdb_ConcurrentTaskLimiterImpl
#define _Included_org_rocksdb_ConcurrentTaskLimiterImpl
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_rocksdb_ConcurrentTaskLimiterImpl
 * Method:    newConcurrentTaskLimiterImpl0
 * Signature: (Ljava/lang/String;I)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ConcurrentTaskLimiterImpl_newConcurrentTaskLimiterImpl0
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     org_rocksdb_ConcurrentTaskLimiterImpl
 * Method:    name
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_rocksdb_ConcurrentTaskLimiterImpl_name
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ConcurrentTaskLimiterImpl
 * Method:    setMaxOutstandingTask
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ConcurrentTaskLimiterImpl_setMaxOutstandingTask
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ConcurrentTaskLimiterImpl
 * Method:    resetMaxOutstandingTask
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ConcurrentTaskLimiterImpl_resetMaxOutstandingTask
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ConcurrentTaskLimiterImpl
 * Method:    outstandingTask
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_ConcurrentTaskLimiterImpl_outstandingTask
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ConcurrentTaskLimiterImpl
 * Method:    disposeInternalJni
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ConcurrentTaskLimiterImpl_disposeInternalJni
  (JNIEnv *, jclass, jlong);

#ifdef __cplusplus
}
#endif
#endif
