/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_rocksdb_ColumnFamilyOptions */

#ifndef _Included_org_rocksdb_ColumnFamilyOptions
#define _Included_org_rocksdb_ColumnFamilyOptions
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    getColumnFamilyOptionsFromProps
 * Signature: (JLjava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_getColumnFamilyOptionsFromProps__JLjava_lang_String_2
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    getColumnFamilyOptionsFromProps
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_getColumnFamilyOptionsFromProps__Ljava_lang_String_2
  (JNIEnv *, jclass, jstring);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    newColumnFamilyOptions
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_newColumnFamilyOptions
  (JNIEnv *, jclass);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    copyColumnFamilyOptions
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_copyColumnFamilyOptions
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    newColumnFamilyOptionsFromOptions
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_newColumnFamilyOptionsFromOptions
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    disposeInternalJni
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_disposeInternalJni
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    oldDefaults
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_oldDefaults
  (JNIEnv *, jclass, jlong, jint, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    optimizeForSmallDb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_optimizeForSmallDb__J
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    optimizeForSmallDb
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_optimizeForSmallDb__JJ
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    optimizeForPointLookup
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_optimizeForPointLookup
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    optimizeLevelStyleCompaction
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_optimizeLevelStyleCompaction
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    optimizeUniversalStyleCompaction
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_optimizeUniversalStyleCompaction
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setComparatorHandle
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setComparatorHandle__JI
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setComparatorHandle
 * Signature: (JJB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setComparatorHandle__JJB
  (JNIEnv *, jclass, jlong, jlong, jbyte);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMergeOperatorName
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMergeOperatorName
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMergeOperator
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMergeOperator
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setCompactionFilterHandle
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setCompactionFilterHandle
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setCompactionFilterFactoryHandle
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setCompactionFilterFactoryHandle
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setWriteBufferSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setWriteBufferSize
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    writeBufferSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_writeBufferSize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMaxWriteBufferNumber
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMaxWriteBufferNumber
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    maxWriteBufferNumber
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_ColumnFamilyOptions_maxWriteBufferNumber
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMinWriteBufferNumberToMerge
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMinWriteBufferNumberToMerge
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    minWriteBufferNumberToMerge
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_ColumnFamilyOptions_minWriteBufferNumberToMerge
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setCompressionType
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setCompressionType
  (JNIEnv *, jclass, jlong, jbyte);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    compressionType
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_ColumnFamilyOptions_compressionType
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setCompressionPerLevel
 * Signature: (J[B)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setCompressionPerLevel
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    compressionPerLevel
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_org_rocksdb_ColumnFamilyOptions_compressionPerLevel
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setBottommostCompressionType
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setBottommostCompressionType
  (JNIEnv *, jclass, jlong, jbyte);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    bottommostCompressionType
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_ColumnFamilyOptions_bottommostCompressionType
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setBottommostCompressionOptions
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setBottommostCompressionOptions
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setCompressionOptions
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setCompressionOptions
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    useFixedLengthPrefixExtractor
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_useFixedLengthPrefixExtractor
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    useCappedPrefixExtractor
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_useCappedPrefixExtractor
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setNumLevels
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setNumLevels
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    numLevels
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_ColumnFamilyOptions_numLevels
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setLevelZeroFileNumCompactionTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setLevelZeroFileNumCompactionTrigger
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    levelZeroFileNumCompactionTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_ColumnFamilyOptions_levelZeroFileNumCompactionTrigger
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setLevelZeroSlowdownWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setLevelZeroSlowdownWritesTrigger
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    levelZeroSlowdownWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_ColumnFamilyOptions_levelZeroSlowdownWritesTrigger
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setLevelZeroStopWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setLevelZeroStopWritesTrigger
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    levelZeroStopWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_ColumnFamilyOptions_levelZeroStopWritesTrigger
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setTargetFileSizeBase
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setTargetFileSizeBase
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    targetFileSizeBase
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_targetFileSizeBase
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setTargetFileSizeMultiplier
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setTargetFileSizeMultiplier
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    targetFileSizeMultiplier
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_ColumnFamilyOptions_targetFileSizeMultiplier
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMaxBytesForLevelBase
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMaxBytesForLevelBase
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    maxBytesForLevelBase
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_maxBytesForLevelBase
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setLevelCompactionDynamicLevelBytes
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setLevelCompactionDynamicLevelBytes
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    levelCompactionDynamicLevelBytes
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_ColumnFamilyOptions_levelCompactionDynamicLevelBytes
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMaxBytesForLevelMultiplier
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMaxBytesForLevelMultiplier
  (JNIEnv *, jclass, jlong, jdouble);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    maxBytesForLevelMultiplier
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_rocksdb_ColumnFamilyOptions_maxBytesForLevelMultiplier
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMaxCompactionBytes
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMaxCompactionBytes
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    maxCompactionBytes
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_maxCompactionBytes
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setArenaBlockSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setArenaBlockSize
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    arenaBlockSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_arenaBlockSize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setDisableAutoCompactions
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setDisableAutoCompactions
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    disableAutoCompactions
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_ColumnFamilyOptions_disableAutoCompactions
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setCompactionStyle
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setCompactionStyle
  (JNIEnv *, jclass, jlong, jbyte);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    compactionStyle
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_ColumnFamilyOptions_compactionStyle
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMaxTableFilesSizeFIFO
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMaxTableFilesSizeFIFO
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    maxTableFilesSizeFIFO
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_maxTableFilesSizeFIFO
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMaxSequentialSkipInIterations
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMaxSequentialSkipInIterations
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    maxSequentialSkipInIterations
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_maxSequentialSkipInIterations
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMemTableFactory
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMemTableFactory
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    memTableFactoryName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_rocksdb_ColumnFamilyOptions_memTableFactoryName
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setTableFactory
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setTableFactory
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    tableFactoryName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_rocksdb_ColumnFamilyOptions_tableFactoryName
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setCfPaths
 * Signature: (J[Ljava/lang/String;[J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setCfPaths
  (JNIEnv *, jclass, jlong, jobjectArray, jlongArray);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    cfPathsLen
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_cfPathsLen
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    cfPaths
 * Signature: (J[Ljava/lang/String;[J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_cfPaths
  (JNIEnv *, jclass, jlong, jobjectArray, jlongArray);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setInplaceUpdateSupport
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setInplaceUpdateSupport
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    inplaceUpdateSupport
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_ColumnFamilyOptions_inplaceUpdateSupport
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setInplaceUpdateNumLocks
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setInplaceUpdateNumLocks
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    inplaceUpdateNumLocks
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_inplaceUpdateNumLocks
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMemtablePrefixBloomSizeRatio
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMemtablePrefixBloomSizeRatio
  (JNIEnv *, jclass, jlong, jdouble);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    memtablePrefixBloomSizeRatio
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_rocksdb_ColumnFamilyOptions_memtablePrefixBloomSizeRatio
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setExperimentalMempurgeThreshold
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setExperimentalMempurgeThreshold
  (JNIEnv *, jclass, jlong, jdouble);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    experimentalMempurgeThreshold
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_rocksdb_ColumnFamilyOptions_experimentalMempurgeThreshold
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMemtableWholeKeyFiltering
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMemtableWholeKeyFiltering
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    memtableWholeKeyFiltering
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_ColumnFamilyOptions_memtableWholeKeyFiltering
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setBloomLocality
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setBloomLocality
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    bloomLocality
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_ColumnFamilyOptions_bloomLocality
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMaxSuccessiveMerges
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMaxSuccessiveMerges
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    maxSuccessiveMerges
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_maxSuccessiveMerges
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setOptimizeFiltersForHits
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setOptimizeFiltersForHits
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    optimizeFiltersForHits
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_ColumnFamilyOptions_optimizeFiltersForHits
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMemtableHugePageSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMemtableHugePageSize
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    memtableHugePageSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_memtableHugePageSize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setSoftPendingCompactionBytesLimit
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setSoftPendingCompactionBytesLimit
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    softPendingCompactionBytesLimit
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_softPendingCompactionBytesLimit
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setHardPendingCompactionBytesLimit
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setHardPendingCompactionBytesLimit
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    hardPendingCompactionBytesLimit
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_hardPendingCompactionBytesLimit
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setLevel0FileNumCompactionTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setLevel0FileNumCompactionTrigger
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    level0FileNumCompactionTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_ColumnFamilyOptions_level0FileNumCompactionTrigger
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setLevel0SlowdownWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setLevel0SlowdownWritesTrigger
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    level0SlowdownWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_ColumnFamilyOptions_level0SlowdownWritesTrigger
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setLevel0StopWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setLevel0StopWritesTrigger
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    level0StopWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_ColumnFamilyOptions_level0StopWritesTrigger
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMaxBytesForLevelMultiplierAdditional
 * Signature: (J[I)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMaxBytesForLevelMultiplierAdditional
  (JNIEnv *, jclass, jlong, jintArray);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    maxBytesForLevelMultiplierAdditional
 * Signature: (J)[I
 */
JNIEXPORT jintArray JNICALL Java_org_rocksdb_ColumnFamilyOptions_maxBytesForLevelMultiplierAdditional
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setParanoidFileChecks
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setParanoidFileChecks
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    paranoidFileChecks
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_ColumnFamilyOptions_paranoidFileChecks
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMaxWriteBufferNumberToMaintain
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMaxWriteBufferNumberToMaintain
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    maxWriteBufferNumberToMaintain
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_ColumnFamilyOptions_maxWriteBufferNumberToMaintain
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setCompactionPriority
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setCompactionPriority
  (JNIEnv *, jclass, jlong, jbyte);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    compactionPriority
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_ColumnFamilyOptions_compactionPriority
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setReportBgIoStats
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setReportBgIoStats
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    reportBgIoStats
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_ColumnFamilyOptions_reportBgIoStats
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setTtl
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setTtl
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    ttl
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_ttl
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setPeriodicCompactionSeconds
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setPeriodicCompactionSeconds
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    periodicCompactionSeconds
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_periodicCompactionSeconds
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setCompactionOptionsUniversal
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setCompactionOptionsUniversal
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setCompactionOptionsFIFO
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setCompactionOptionsFIFO
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setForceConsistencyChecks
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setForceConsistencyChecks
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    forceConsistencyChecks
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_ColumnFamilyOptions_forceConsistencyChecks
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setSstPartitionerFactory
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setSstPartitionerFactory
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setCompactionThreadLimiter
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setCompactionThreadLimiter
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMemtableMaxRangeDeletions
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMemtableMaxRangeDeletions
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    memtableMaxRangeDeletions
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_ColumnFamilyOptions_memtableMaxRangeDeletions
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setEnableBlobFiles
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setEnableBlobFiles
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    enableBlobFiles
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_ColumnFamilyOptions_enableBlobFiles
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setMinBlobSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setMinBlobSize
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    minBlobSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_minBlobSize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setBlobFileSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setBlobFileSize
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    blobFileSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_blobFileSize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setBlobCompressionType
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setBlobCompressionType
  (JNIEnv *, jclass, jlong, jbyte);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    blobCompressionType
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_ColumnFamilyOptions_blobCompressionType
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setEnableBlobGarbageCollection
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setEnableBlobGarbageCollection
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    enableBlobGarbageCollection
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_ColumnFamilyOptions_enableBlobGarbageCollection
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setBlobGarbageCollectionAgeCutoff
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setBlobGarbageCollectionAgeCutoff
  (JNIEnv *, jclass, jlong, jdouble);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    blobGarbageCollectionAgeCutoff
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_rocksdb_ColumnFamilyOptions_blobGarbageCollectionAgeCutoff
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setBlobGarbageCollectionForceThreshold
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setBlobGarbageCollectionForceThreshold
  (JNIEnv *, jclass, jlong, jdouble);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    blobGarbageCollectionForceThreshold
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_rocksdb_ColumnFamilyOptions_blobGarbageCollectionForceThreshold
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setBlobCompactionReadaheadSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setBlobCompactionReadaheadSize
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    blobCompactionReadaheadSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_ColumnFamilyOptions_blobCompactionReadaheadSize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setBlobFileStartingLevel
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setBlobFileStartingLevel
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    blobFileStartingLevel
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_ColumnFamilyOptions_blobFileStartingLevel
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    setPrepopulateBlobCache
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_ColumnFamilyOptions_setPrepopulateBlobCache
  (JNIEnv *, jclass, jlong, jbyte);

/*
 * Class:     org_rocksdb_ColumnFamilyOptions
 * Method:    prepopulateBlobCache
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_ColumnFamilyOptions_prepopulateBlobCache
  (JNIEnv *, jclass, jlong);

#ifdef __cplusplus
}
#endif
#endif
