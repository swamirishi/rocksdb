/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_rocksdb_WriteBatch */

#ifndef _Included_org_rocksdb_WriteBatch
#define _Included_org_rocksdb_WriteBatch
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    disposeInternalJni
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_disposeInternalJni
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    count0Jni
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_WriteBatch_count0Jni
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    putJni
 * Signature: (J[BI[BI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_putJni__J_3BI_3BI
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jbyteArray, jint);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    putJni
 * Signature: (J[BI[BIJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_putJni__J_3BI_3BIJ
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jbyteArray, jint, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    putDirectJni
 * Signature: (JLjava/nio/ByteBuffer;IILjava/nio/ByteBuffer;IIJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_putDirectJni
  (JNIEnv *, jclass, jlong, jobject, jint, jint, jobject, jint, jint, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    mergeJni
 * Signature: (J[BI[BI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_mergeJni__J_3BI_3BI
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jbyteArray, jint);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    mergeJni
 * Signature: (J[BI[BIJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_mergeJni__J_3BI_3BIJ
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jbyteArray, jint, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    deleteJni
 * Signature: (J[BI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_deleteJni__J_3BI
  (JNIEnv *, jclass, jlong, jbyteArray, jint);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    deleteJni
 * Signature: (J[BIJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_deleteJni__J_3BIJ
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    singleDeleteJni
 * Signature: (J[BI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_singleDeleteJni__J_3BI
  (JNIEnv *, jclass, jlong, jbyteArray, jint);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    singleDeleteJni
 * Signature: (J[BIJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_singleDeleteJni__J_3BIJ
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    deleteDirectJni
 * Signature: (JLjava/nio/ByteBuffer;IIJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_deleteDirectJni
  (JNIEnv *, jclass, jlong, jobject, jint, jint, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    deleteRangeJni
 * Signature: (J[BI[BI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_deleteRangeJni__J_3BI_3BI
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jbyteArray, jint);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    deleteRangeJni
 * Signature: (J[BI[BIJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_deleteRangeJni__J_3BI_3BIJ
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jbyteArray, jint, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    putLogDataJni
 * Signature: (J[BI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_putLogDataJni
  (JNIEnv *, jclass, jlong, jbyteArray, jint);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    clear0Jni
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_clear0Jni
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    setSavePoint0Jni
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_setSavePoint0Jni
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    rollbackToSavePoint0Jni
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_rollbackToSavePoint0Jni
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    popSavePointJni
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_popSavePointJni
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    setMaxBytesJni
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_setMaxBytesJni
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    newWriteBatch
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_WriteBatch_newWriteBatch__I
  (JNIEnv *, jclass, jint);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    newWriteBatch
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_WriteBatch_newWriteBatch___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    iterate
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_iterate
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    data
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_org_rocksdb_WriteBatch_data
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    getDataSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_WriteBatch_getDataSize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    hasPut
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_WriteBatch_hasPut
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    hasDelete
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_WriteBatch_hasDelete
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    hasSingleDelete
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_WriteBatch_hasSingleDelete
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    hasDeleteRange
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_WriteBatch_hasDeleteRange
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    hasMerge
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_WriteBatch_hasMerge
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    hasBeginPrepare
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_WriteBatch_hasBeginPrepare
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    hasEndPrepare
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_WriteBatch_hasEndPrepare
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    hasCommit
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_WriteBatch_hasCommit
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    hasRollback
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_WriteBatch_hasRollback
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    markWalTerminationPoint
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteBatch_markWalTerminationPoint
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteBatch
 * Method:    getWalTerminationPoint
 * Signature: (J)Lorg/rocksdb/WriteBatch/SavePoint;
 */
JNIEXPORT jobject JNICALL Java_org_rocksdb_WriteBatch_getWalTerminationPoint
  (JNIEnv *, jclass, jlong);

#ifdef __cplusplus
}
#endif
#endif
