/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_rocksdb_WriteOptions */

#ifndef _Included_org_rocksdb_WriteOptions
#define _Included_org_rocksdb_WriteOptions
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_rocksdb_WriteOptions
 * Method:    newWriteOptions
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_WriteOptions_newWriteOptions
  (JNIEnv *, jclass);

/*
 * Class:     org_rocksdb_WriteOptions
 * Method:    copyWriteOptions
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_WriteOptions_copyWriteOptions
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteOptions
 * Method:    disposeInternalJni
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteOptions_disposeInternalJni
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteOptions
 * Method:    setSync
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteOptions_setSync
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_WriteOptions
 * Method:    sync
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_WriteOptions_sync
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteOptions
 * Method:    setDisableWAL
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteOptions_setDisableWAL
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_WriteOptions
 * Method:    disableWAL
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_WriteOptions_disableWAL
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteOptions
 * Method:    setIgnoreMissingColumnFamilies
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteOptions_setIgnoreMissingColumnFamilies
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_WriteOptions
 * Method:    ignoreMissingColumnFamilies
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_WriteOptions_ignoreMissingColumnFamilies
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteOptions
 * Method:    setNoSlowdown
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteOptions_setNoSlowdown
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_WriteOptions
 * Method:    noSlowdown
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_WriteOptions_noSlowdown
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteOptions
 * Method:    setLowPri
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteOptions_setLowPri
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_WriteOptions
 * Method:    lowPri
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_WriteOptions_lowPri
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteOptions
 * Method:    memtableInsertHintPerBatch
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_WriteOptions_memtableInsertHintPerBatch
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_WriteOptions
 * Method:    setMemtableInsertHintPerBatch
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_WriteOptions_setMemtableInsertHintPerBatch
  (JNIEnv *, jclass, jlong, jboolean);

#ifdef __cplusplus
}
#endif
#endif
